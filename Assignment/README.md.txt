Data Structure / Algorithm

For this project I will be using the Bubble Sort algorithm to sort by the first letter or list number, so that I can arrange an object list alphabetically. But first the hero must have items in that list to sort, so I have put 5 chests in the SFML window, when a player’s position intersects with the position of a chest and they press the space bar, the chest will be removed from the window and a random item will be picked from the item list using a random integer that has been stored in a list, this way that random integer won’t be used again, then the picked item will be displayed in the Inventory List, so that we can now sort it by name and price, the list will be displayed line by line in a inventory box on the right of the screen once the player has clicked on the Sort Name or Sort Price button.
It is mostly used as an educational tool and it not really implemented in real world use because of its poor performance as it doesn’t play well with modern CPUs, and therefore it is described as the worst sorting method, but I think it will work fine for a small list of items, which my project will use. 

Strengths & Weaknesses

The strengths of the bubble sort it is a very easy algorithm to implement and can be modified easily to suite your needs, it is also easy to explain to less tech savvy people and won’t use too much memory on your computer, so even the cheapest computers can easily perform its task.
If a large list is already mostly sorted it will be a good choice, as the re arrangement of elements does not affect performance too much , but if it is a big unsorted list, it would be better to choose another sorting algorithm because using an unsorted array requires the use of O(n^2), which is only effective when the number of inputs is small, otherwise sorting an unsorted list can take a long time. 
Therefore, it is considered the worst sorting algorithm, because if a sorting algorithm only works well, it the list is mostly sorted, then what good is it?
Real-World Example

Even though bubble sort is never really used, I could see an example of it being used in employees salary’s, you could have a list that has all the employees details sorted by salary and when an employee gets a pay raise, they will be compared to the employee above them, to see if their salary if higher than theirs, if not they will swap positions with that employee in the list. 

Implementation

The way I started with the Bubble Sort algorithm was to just try and pass the Object list, which was my list of items that the hero had picked up, this gave me an error that it couldn’t take a Object list into the sorting method, so I then decided to extract the two values, that being the Item Name and the Item Price into separate strings, I put this into a loop, so that it would go through each index in the Inventory List and extract those two strings, it then takes those strings and puts them into a new <string> list named Temp List, separated by a comma(which becomes useful later in the algorithm). 
The bubble sort, this one being the bubble sort of the Item Name, would then use the “Compare To” function to compare the first index with the second index, if the first index was greater than the second index, it will swap their positions, by setting the first index to a string named Temp String, then it will change the string of the first index to the second index and finally it will set the Temp String, that being the first index into the second index, then it will repeat this process with the second and third index and so on.
Once the basic bubble sort loop has finished, my sorting algorithm will check if the count of the Temp List is equal to the Inventory List, if it is, it will clear out the Inventory List to make way for the sorted items.
Now it will then run a loop the count of the Temp List, it then extracts the string out of the temp list, then it splits the list using the Split function and I declared the comma as the split point, now it declares the string before the comma as the new sorted Item Name and declares the string after the comma as the Item Price, then it converts the item price to an int using a parse function. Now we have two usable variables to put back into the Inventory List and the bubble sort function has completed.
For the bubble sort by price function, I simply swapped the order the strings are placed into the Temp List, so the Item Price went it first, this way the “Compare To” function would compare the first integer of the Item Price string, I ran into a problem that the “Compare To” function doesn’t account for numbers past 99, I had an item that was worth $100 but it was below another item that cost $2.
In the future if I was to choose a sorting algorithm, I would probably go with the industry standard Quicksort. 
